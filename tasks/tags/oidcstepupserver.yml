- name: Configurable | OIDCStepUpServer | dependency | oidc
  include: oidc.yml
  when: "'oidc' not in confs"

- name: Configurable | OIDCStepUpServer | Download | Plugin v{{ shibbolethidp_oidcstepupserver_version }}
  unarchive:
    extra_opts: ['--strip-components=1']
    src: "{{ shibbolethidp_oidcstepupserver_location }}/releases/download/v{{ shibbolethidp_oidcstepupserver_version }}/idp-stepup-distribution-{{ shibbolethidp_oidcstepupserver_version | regex_replace('[^0-9RC.-]', '') }}-bin.tar.gz"
    remote_src: yes
    dest: "{{ shibbolethidp_idp_home }}"
    creates: "{{ shibbolethidp_idp_home }}/edit-webapp/WEB-INF/lib/idp-stepup-api-{{ shibbolethidp_oidcstepupserver_version | regex_replace('[^0-9RC.-]', '') }}.jar"
  notify: reown shibboleth-idp

- name: Configurable | OIDCStepUpServer | Detect | Duplicate | Plugins
  find:
    paths: "{{ shibbolethidp_idp_home }}/edit-webapp/WEB-INF/lib"
    patterns: "^(?!.*({{ shibbolethidp_oidcstepupserver_version | regex_replace('[^0-9RC.-]', '') }})).*idp-stepup"
    use_regex: true
  register: files_to_delete

- name: Configurable | OIDCStepUpServer | Delete | Older | Plugins
  file:
    path: "{{ shibbolethidp_item.path }}"
    state: absent
  with_items: "{{ files_to_delete.files }}"
  loop_control:
    loop_var: shibbolethidp_item

#- name: Shibboleth IdP | OIDC | Import OIDC extension configuration files
# =======================================================================

- name: Test for idpauthnflows line
  shell: grep -c "<util:list id="shibboleth.AvailableAuthenticationFlows">" "{{ shibbolethidp_idp_home }}/conf/authn/general-authn.xml" || true
  register: authenticationflows

- name: Configurable | OIDCStepUpServer | Configure | Flow | Insert | general-authn.xml
  blockinfile:
    dest: "{{ shibbolethidp_idp_home }}/conf/authn/general-authn.xml"
    marker: "    <!-- {mark} ansible managed - stepup-flow -->"
    insertafter: 'default-destroy-method="destroy"'
    content: |2
        <util:list id="shibboleth.AvailableAuthenticationFlows">

        <!-- Custom authentication flow -->
        <bean id="authn/Stepup" parent="shibboleth.AuthenticationFlow" p:passiveAuthenticationSupported="false" p:forcedAuthenticationSupported="true" >
          <property name="supportedPrincipals">
            <list>
              <bean parent="shibboleth.OIDCAuthnContextClassReference" c:classRef="https://refeds.org/profile/mfa"/>
              <bean parent="shibboleth.SAML2AuthnContextClassRef" c:classRef="https://refeds.org/profile/mfa"/>
              <bean parent="shibboleth.OIDCAuthnContextClassReference" c:classRef="https://{{ shibbolethidp_fqdn }}/LoginHakaMFA"/>
              <bean parent="shibboleth.SAML2AuthnContextClassRef" c:classRef="https://{{ shibbolethidp_fqdn }}/LoginHakaMFA"/>
              <bean parent="shibboleth.OIDCAuthnContextClassReference" c:classRef="https://{{ shibbolethidp_fqdn }}/LoginCSCMFA"/>
              <bean parent="shibboleth.SAML2AuthnContextClassRef" c:classRef="https://{{ shibbolethidp_fqdn }}/LoginCSCMFA"/>
              <bean parent="shibboleth.OIDCAuthnContextClassReference" c:classRef="https://{{ shibbolethidp_fqdn }}/LoginVirtuMFA"/>
              <bean parent="shibboleth.SAML2AuthnContextClassRef" c:classRef="https://{{ shibbolethidp_fqdn }}/LoginVirtuMFA"/>
            </list>
          </property>
        </bean>
        </util:list>
  when: authenticationflows == "0"

- name: Configurable | OIDCStepUpServer | Configure | Flow | Insert | general-authn.xml
  blockinfile:
    dest: "{{ shibbolethidp_idp_home }}/conf/authn/general-authn.xml"
    marker: "    <!-- {mark} ansible managed - stepup-flow -->"
    insertbefore: '</util:list>'
    content: |2
        <!-- Custom authentication flow -->
        <bean id="authn/Stepup" parent="shibboleth.AuthenticationFlow" p:passiveAuthenticationSupported="false" p:forcedAuthenticationSupported="true" >
          <property name="supportedPrincipals">
            <list>
              <bean parent="shibboleth.OIDCAuthnContextClassReference" c:classRef="https://refeds.org/profile/mfa"/>
              <bean parent="shibboleth.SAML2AuthnContextClassRef" c:classRef="https://refeds.org/profile/mfa"/>
              <bean parent="shibboleth.OIDCAuthnContextClassReference" c:classRef="https://{{ shibbolethidp_fqdn }}/LoginHakaMFA"/>
              <bean parent="shibboleth.SAML2AuthnContextClassRef" c:classRef="https://{{ shibbolethidp_fqdn }}/LoginHakaMFA"/>
              <bean parent="shibboleth.OIDCAuthnContextClassReference" c:classRef="https://{{ shibbolethidp_fqdn }}/LoginCSCMFA"/>
              <bean parent="shibboleth.SAML2AuthnContextClassRef" c:classRef="https://{{ shibbolethidp_fqdn }}/LoginCSCMFA"/>
              <bean parent="shibboleth.OIDCAuthnContextClassReference" c:classRef="https://{{ shibbolethidp_fqdn }}/LoginVirtuMFA"/>
              <bean parent="shibboleth.SAML2AuthnContextClassRef" c:classRef="https://{{ shibbolethidp_fqdn }}/LoginVirtuMFA"/>
            </list>
          </property>
        </bean>
  when: authenticationflows != "0"

- name: Configurable | {{ item }} | Configure | idp.properties | (to include /conf/authn/stepup.properties)
  lineinfile:
    dest: "{{ shibbolethidp_idp_home }}/conf/idp.properties"
    regexp: ^(?!.*stepup)(idp.additionalProperties.*)$
    line: '\1, /conf/authn/stepup.properties'
    backrefs: yes

- name: Configurable | OIDCStepUpServer | authn.properties
  replace:
    path: "{{ shibbolethidp_idp_home }}/conf/authn/authn.properties"
    regexp: '^idp\.authn\.MFA\.supportedPrincipals =([\s\S]*)#'
    replace: 'idp.authn.MFA.supportedPrincipals = saml2/https://refeds.org/profile/mfa, oidc/https://refeds.org/profile/mfa \n#'
    backup: yes
  ignore_errors: yes


- name: Configurable | OIDCStepUpServer | stepup.properties
  lineinfile: dest={{ shibbolethidp_idp_home }}/conf/authn/stepup.properties regexp="^#?\s*({{ item_stepup.option }}\s*=)" backrefs=yes  line="\\1 {{ item_stepup.value }}"
  with_items:
    - { option: 'stepup.authenticationManager', value: "{{ shibbolethidp_oidcstepupserver_stepup_authenticationManager }}", state: present }
    - { option: 'stepup.attributedecryptor.key', value: "{{ shibbolethidp_oidcstepupserver_stepup_attributedecryptor_key }}", state: present }
  loop_control:
    loop_var: item_stepup

- name: Test for idpauthnflows line
  shell: grep -c "idp.authn.flows" "{{ shibbolethidp_idp_home }}/conf/idp.properties" || true
  register: idpauthnflows

- name: add idp.authn.flows line
  lineinfile:
    dest: "{{ shibbolethidp_idp_home }}/conf/idp.properties"
    line: idp.authn.flows =
  when: idpauthnflows.stdout == "0"

- name: MFA | Configure | Flow | idp.properties
  lineinfile:
    dest: "{{ shibbolethidp_idp_home }}/conf/idp.properties"
    regexp: ^(?!.*MFA)(idp.authn.flows=.*)$
    line: \1|MFA
    backrefs: yes
  notify:
    - restart shibboleth-idp

- name: Configure | MFA | authn/general-authn.xml | authn/MFAs | Remove
  xml:
    xpath: "{{ item_stepup }}"
    ensure: "absent"
    file: "{{ shibbolethidp_idp_home }}/conf/authn/general-authn.xml"
    namespaces:
      x: http://www.springframework.org/schema/beans
      p: http://www.springframework.org/schema/p
      util: http://www.springframework.org/schema/util
  with_items:
    - "//x:bean[@id='authn/LoginVirtuMFA']"
    - "//x:bean[@id='authn/LoginHakaMFA']"
    - "/x:beans/x:bean[@id='authn/MFA']/x:property/x:list"
  loop_control:
    loop_var: item_stepup
  notify: restart shibboleth-idp

    #- name: Configure | {{ item }} | Del | bean[@id="authn/MFA"] < general-authn.xml
    #  xml:
    #    file: "{{ shibbolethidp_idp_home }}/conf/authn/general-authn.xml"
    #    xpath: /x:beans/x:bean[@id="authn/MFA"]/x:property/x:list
    #    namespaces:
    #      x: "http://www.springframework.org/schema/beans"
    #    state: absent

- name: Configure | {{ item }} | Add | bean[@id="authn/MFA"] > general-authn.xml
  xml:
    file: "{{ shibbolethidp_idp_home }}/conf/authn/general-authn.xml"
    xpath: "/x:beans/x:bean[@id='authn/MFA']/x:property"
    pretty_print: yes
    namespaces:
      x: "http://www.springframework.org/schema/beans"
      p: "http://www.springframework.org/schema/p"
      c: "http://www.springframework.org/schema/c"
    add_children:
      - list:
           _:
              - bean:
                  parent: "shibboleth.OIDCAuthnContextClassReference"
                  "{http://www.springframework.org/schema/c}classRef": "https://{{ shibbolethidp_fqdn }}/LoginHakaMFA"
              - bean:
                  parent: "shibboleth.SAML2AuthnContextClassRef"
                  "{http://www.springframework.org/schema/c}classRef": "https://{{ shibbolethidp_fqdn }}/LoginHakaMFA"
              - bean:
                  parent: "shibboleth.OIDCAuthnContextClassReference"
                  "{http://www.springframework.org/schema/c}classRef": "https://{{ shibbolethidp_fqdn }}/LoginVirtuMFA"
              - bean:
                  parent: "shibboleth.SAML2AuthnContextClassRef"
                  "{http://www.springframework.org/schema/c}classRef": "https://{{ shibbolethidp_fqdn }}/LoginVirtuMFA"
              - bean:
                  parent: "shibboleth.OIDCAuthnContextClassReference"
                  "{http://www.springframework.org/schema/c}classRef": "https://{{ shibbolethidp_fqdn }}/LoginCSCMFA"
              - bean:
                  parent: "shibboleth.SAML2AuthnContextClassRef"
                  "{http://www.springframework.org/schema/c}classRef": "https://{{ shibbolethidp_fqdn }}/LoginCSCMFA"


- name: Configure | {{ item }} | Add | bean[@id="authn/LoginHakaMFA"] > general-authn.xml
  xml:
    file: "{{ shibbolethidp_idp_home }}/conf/authn/general-authn.xml"
    xpath: "//x:bean[@id='authn/MFA']"
    insertbefore: yes
    pretty_print: yes
    namespaces:
      x: "http://www.springframework.org/schema/beans"
      p: "http://www.springframework.org/schema/p"
      c: "http://www.springframework.org/schema/c"
    add_children:
      - bean:
          id: "authn/LoginHakaMFA"
          parent: "shibboleth.AuthenticationFlow"
          "{http://www.springframework.org/schema/p}nonBrowserSupported": "false"
          "{http://www.springframework.org/schema/p}forcedAuthenticationSupported": "true"
          _:
            - property:
                name: supportedPrincipals
                _:
                  - list:
                      _:
                         - bean:
                             parent: "shibboleth.SAML2AuthnContextClassRef"
                             "{http://www.springframework.org/schema/c}classRef": "urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport"
                         - bean:
                             parent: "shibboleth.OIDCAuthnContextClassReference"
                             "{http://www.springframework.org/schema/c}classRef": "urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport"
                         - bean:
                             parent: "shibboleth.SAML2AuthnContextClassRef"
                             "{http://www.springframework.org/schema/c}classRef": "https://{{ shibbolethidp_fqdn }}/LoginHakaMFA"
                         - bean:
                             parent: "shibboleth.OIDCAuthnContextClassReference"
                             "{http://www.springframework.org/schema/c}classRef": "https://{{ shibbolethidp_fqdn }}/LoginHakaMFA"
                         - bean:
                             parent: "shibboleth.SAML2AuthnContextClassRef"
                             "{http://www.springframework.org/schema/c}classRef": "https://refeds.org/profile/mfa"
                         - bean:
                             parent: "shibboleth.OIDCAuthnContextClassReference"
                             "{http://www.springframework.org/schema/c}classRef": "https://refeds.org/profile/mfa"

- name: Configure | {{ item }} | Add | bean[@id="authn/LoginVirtuMFA"] > general-authn.xml
  xml:
    file: "{{ shibbolethidp_idp_home }}/conf/authn/general-authn.xml"
    xpath: "//x:bean[@id='authn/MFA']"
    insertbefore: yes
    pretty_print: yes
    namespaces:
      x: "http://www.springframework.org/schema/beans"
      p: "http://www.springframework.org/schema/p"
      c: "http://www.springframework.org/schema/c"
    add_children:
      - bean:
          id: "authn/LoginVirtuMFA"
          parent: "shibboleth.AuthenticationFlow"
          "{http://www.springframework.org/schema/p}nonBrowserSupported": "false"
          "{http://www.springframework.org/schema/p}forcedAuthenticationSupported": "true"
          _:
            - property:
                name: supportedPrincipals
                _:
                  - list:
                      _:
                         - bean:
                             parent: "shibboleth.SAML2AuthnContextClassRef"
                             "{http://www.springframework.org/schema/c}classRef": "urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport"
                         - bean:
                             parent: "shibboleth.OIDCAuthnContextClassReference"
                             "{http://www.springframework.org/schema/c}classRef": "urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport"
                         - bean:
                             parent: "shibboleth.SAML2AuthnContextClassRef"
                             "{http://www.springframework.org/schema/c}classRef": "https://{{ shibbolethidp_fqdn }}/LoginVirtuMFA"
                         - bean:
                             parent: "shibboleth.OIDCAuthnContextClassReference"
                             "{http://www.springframework.org/schema/c}classRef": "https://{{ shibbolethidp_fqdn }}/LoginVirtuMFA"
                         - bean:
                             parent: "shibboleth.SAML2AuthnContextClassRef"
                             "{http://www.springframework.org/schema/c}classRef": "https://refeds.org/profile/mfa"
                         - bean:
                             parent: "shibboleth.OIDCAuthnContextClassReference"
                             "{http://www.springframework.org/schema/c}classRef": "https://refeds.org/profile/mfa"

